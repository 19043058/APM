name: Secure CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v16

      - name: Install nixos-generators
        run: nix-env -f https://github.com/nix-community/nixos-generators/archive/master.tar.gz -i

      - name: Build NixOS QCOW2 Image
        run: |
          export PATH="$HOME/.nix-profile/bin:$PATH"
          nixos-generate -f qcow -c ./nixos/configuration.nix -o ./nixos.qcow2

      - name: Install Proxmoxer
        run: pip install proxmoxer

      - name: Upload QCOW2 Image to Proxmox
        env:
          PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
          PROXMOX_TOKEN_ID: ${{ secrets.PROXMOX_TOKEN_ID }}
          PROXMOX_TOKEN_SECRET: ${{ secrets.PROXMOX_TOKEN_SECRET }}
          NODE_NAME: 'pve'
          STORAGE_NAME: 'local'
        run: |
          curl -k -X POST "https://$PROXMOX_HOST:8006/api2/json/nodes/$NODE_NAME/storage/$STORAGE_NAME/upload" \
               -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN_ID=$PROXMOX_TOKEN_SECRET" \
               -F content=vztmpl \
               -F filename=@nixos.qcow2

      - name: Create Proxmox VM Template
        env:
          PROXMOX_HOST: ${{ secrets.PROXMOX_HOST }}
          PROXMOX_TOKEN_ID: ${{ secrets.PROXMOX_TOKEN_ID }}
          PROXMOX_TOKEN_SECRET: ${{ secrets.PROXMOX_TOKEN_SECRET }}
          NODE_NAME: 'pve'
          STORAGE_NAME: 'local'
        run: |
          python proxmox_template.py

  terraform:
    name: Terraform Provisioning
    needs: build-and-deploy
    runs-on: ubuntu-latest
    env:
      TF_LOG: ERROR
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        env:
          PROXMOX_URL: ${{ secrets.PROXMOX_URL }}
          PROXMOX_TOKEN_ID: ${{ secrets.PROXMOX_TOKEN_ID }}
          PROXMOX_TOKEN_SECRET: ${{ secrets.PROXMOX_TOKEN_SECRET }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          terraform plan -out=tfplan.binary \
            -var="proxmox_url=${{ env.PROXMOX_URL }}" \
            -var="proxmox_token_id=${{ env.PROXMOX_TOKEN_ID }}" \
            -var="proxmox_token_secret=${{ env.PROXMOX_TOKEN_SECRET }}" \
            -var="ssh_public_key=${{ env.SSH_PUBLIC_KEY }}" \
            -var="template_name=nixos-template" \
            -var="node_name=pve" \
            -var="network_bridge=vmbr0" \
            -var='vm={"vm_id":100,"vm_name":"nginx-server","vm_memory":2048,"vm_cores":2,"vm_disk_size":"20G"}'
        shell: bash

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan.binary
        shell: bash

      - name: Save Terraform Outputs
        id: tf_outputs
        working-directory: ./terraform
        run: terraform output -json > ../ansible/terraform_outputs.json

  ansible:
    name: Ansible Configuration
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Ansible
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ansible

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/nginx_ansible_key
          chmod 600 ~/.ssh/nginx_ansible_key

      - name: Generate Inventory
        run: |
          NGINX_IP=$(jq -r '.nginx_vm_ip.value' ./ansible/terraform_outputs.json)
          echo "[nginx_server]" > ./ansible/inventory/hosts.ini
          echo "nginx ansible_host=$NGINX_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/nginx_ansible_key" >> ./ansible/inventory/hosts.ini

      - name: Run Ansible Playbook
        working-directory: ./ansible
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: ansible-playbook playbooks/site.yml --vault-password-file <(echo "${ANSIBLE_VAULT_PASSWORD}")

  verify:
    name: Verification
    needs: ansible
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install cURL and jq
        run: sudo apt-get install -y curl jq

      - name: Load Terraform Outputs
        run: |
          NGINX_IP=$(jq -r '.nginx_vm_ip.value' ansible/terraform_outputs.json)
          echo "Nginx Server IP: $NGINX_IP"

      - name: Verify Nginx
        run: |
          status_code=$(curl -o /dev/null -s -w "%{http_code}\n" "http://$NGINX_IP")
          echo "Nginx HTTP status code: $status_code"
          if [ "$status_code" -ne 200 ]; then
            echo "Nginx server is not responding correctly."
            exit 1
          fi